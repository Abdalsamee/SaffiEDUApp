package com.example.saffieduapp.presentation.screens.teacher.profile

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class TeacherProfileViewModel @Inject constructor() : ViewModel() {

    private val _state = MutableStateFlow(TeacherProfileState(isLoading = true))
    val state: StateFlow<TeacherProfileState> = _state

    private val auth = FirebaseAuth.getInstance()
    private val db = FirebaseFirestore.getInstance()


    init {
        loadTeacherProfile()
    }

    /**
     * ðŸ§© ØªØ­Ù…ÙŠÙ„ Ø¨ÙŠØ§Ù†Ø§Øª ÙˆÙ‡Ù…ÙŠØ© Ø¨Ø¯Ù„Ù‹Ø§ Ù…Ù† Firestore
     * ØªØ­Ø§ÙƒÙŠ Ø§Ù„Ø¹Ù…Ù„ÙŠØ© Ø§Ù„Ø­Ù‚ÙŠÙ‚ÙŠØ© Ù„Ø¹Ø±Ø¶ Ø´Ø§Ø´Ø© Ø§Ù„Ù…Ø¹Ù„Ù… Ø£Ø«Ù†Ø§Ø¡ Ø§Ù„ØªØ·ÙˆÙŠØ± Ø£Ùˆ Ø¨Ø¯ÙˆÙ† Ø§ØªØµØ§Ù„ Firebase.
     */
    private fun loadTeacherProfile() {
        val currentUser = auth.currentUser
        if (currentUser == null) {
            _state.update {
                it.copy(
                    isLoading = false,
                    error = "Ù„Ù… ÙŠØªÙ… ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø¯Ø®ÙˆÙ„"
                )
            }
            return
        }

        val email = currentUser.email ?: return

        _state.update { it.copy(isLoading = true, error = null) }

        viewModelScope.launch {
            db.collection("teachers")
                .whereEqualTo("email", email)
                .get()
                .addOnSuccessListener { snapshot ->
                    val doc = snapshot.documents.firstOrNull()
                    if (doc != null) {
                        _state.update {
                            it.copy(
                                isLoading = false,
                                fullName = doc.getString("fullName") ?: "",
                                email = email,
                                subject = doc.getString("subject") ?: "",
                                classesCount = doc.getLong("classesCount")?.toInt() ?: 0,
                                profileImageUrl = doc.getString("profileImageUrl")
                            )
                        }
                    } else {
                        _state.update {
                            it.copy(
                                isLoading = false,
                                error = "Ù„Ù… ÙŠØªÙ… Ø§Ù„Ø¹Ø«ÙˆØ± Ø¹Ù„Ù‰ Ø¨ÙŠØ§Ù†Ø§Øª Ø§Ù„Ù…Ø¹Ù„Ù…"
                            )
                        }
                    }
                }
                .addOnFailureListener { e ->
                    _state.update {
                        it.copy(
                            isLoading = false,
                            error = "Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«Ù†Ø§Ø¡ ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø¨ÙŠØ§Ù†Ø§Øª: ${e.message}"
                        )
                    }
                }
        }
    }

    /**
     * ðŸšª ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø®Ø±ÙˆØ¬ (ÙˆÙ‡Ù…ÙŠ Ø£ÙŠØ¶Ù‹Ø§)
     */
    /**
     * ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø®Ø±ÙˆØ¬
     */
    fun logout(onLogoutSuccess: () -> Unit) {
        auth.signOut()
        onLogoutSuccess()
    }
}
