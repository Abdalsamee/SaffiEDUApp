package com.example.saffieduapp.presentation.screens.student.exam_screen.security

import android.app.Activity
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.ViewTreeObserver

/**
 * ŸÉÿßÿ¥ŸÅ ÿßŸÑÿ¥ÿßÿ¥ÿßÿ™ ÿßŸÑŸÖŸÜÿ®ÿ´ŸÇÿ© (Overlays)
 * ‚úÖ ŸÖŸèÿ≠ÿ≥ŸëŸÜ: ŸÉÿ¥ŸÅ ÿ≥ÿ±Ÿäÿπ ŸÑŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑŸÖÿµÿ∫ÿ±ÿ©
 */
class OverlayDetector(
    private val activity: Activity,
    private val onOverlayDetected: () -> Unit
) {
    private val TAG = "OverlayDetector"
    private val handler = Handler(Looper.getMainLooper())

    @Volatile
    private var isMonitoring = false
    private var lastFocusTime = 0L
    private var focusLossCount = 0

    // ‚úÖ Thresholds ŸÖŸèÿÆŸÅÿ∂ÿ© ŸÑŸÑŸÉÿ¥ŸÅ ÿßŸÑÿ≥ÿ±Ÿäÿπ
    private val FOCUS_LOSS_THRESHOLD = 200L  // 200ms ŸÅŸÇÿ∑
    private val FOCUS_COUNT_THRESHOLD = 1     // ŸÖÿ±ÿ© Ÿàÿßÿ≠ÿØÿ© ŸÅŸÇÿ∑!

    private var focusChangeListener: ViewTreeObserver.OnWindowFocusChangeListener? = null
    private var periodicCheckRunnable: Runnable? = null

    /**
     * ÿ®ÿØÿ° ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©
     */
    fun startMonitoring() {
        if (isMonitoring) {
            Log.d(TAG, "Already monitoring")
            return
        }

        isMonitoring = true
        lastFocusTime = System.currentTimeMillis()
        focusLossCount = 0

        // ‚úÖ ŸÅÿ≠ÿµ ŸÅŸàÿ±Ÿä ŸÑŸÑŸÄ overlays ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ© ŸÖÿ≥ÿ®ŸÇÿßŸã
        handler.postDelayed({
            performInitialOverlayCheck()
        }, 500) // ÿ™ÿ£ÿÆŸäÿ± ŸÇÿµŸäÿ± ŸÑŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÑŸÜÿ∏ÿßŸÖ ÿ®ÿßŸÑÿßÿ≥ÿ™ŸÇÿ±ÿßÿ±

        setupWindowFocusMonitoring()
        startPeriodicCheck()

        Log.d(TAG, "‚úÖ Overlay monitoring STARTED")
    }

    /**
     * ‚úÖ ŸÅÿ≠ÿµ ÿ£ŸàŸÑŸä ŸÑŸÑŸÉÿ¥ŸÅ ÿπŸÜ overlays ŸÖŸàÿ¨ŸàÿØÿ© ŸÖÿ≥ÿ®ŸÇÿßŸã
     */
    private fun performInitialOverlayCheck() {
        if (!isMonitoring) return

        Log.d(TAG, "üîç Performing initial overlay check...")

        val hasFocus = activity.hasWindowFocus()

        if (!hasFocus) {
            Log.e(TAG, "üö® INITIAL CHECK: Overlay detected at startup!")

            // ÿ™ÿ£ŸÉŸäÿØ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ÿ®ÿπÿØ ŸÅÿ™ÿ±ÿ© ŸÇÿµŸäÿ±ÿ©
            handler.postDelayed({
                if (isMonitoring && !activity.hasWindowFocus()) {
                    Log.e(TAG, "üö® INITIAL CHECK CONFIRMED: Overlay present before exam start!")
                    handleOverlayDetected("INITIAL_CHECK_OVERLAY_EXISTS")
                } else {
                    Log.d(TAG, "‚úÖ Initial check: Focus OK")
                }
            }, 500)
        } else {
            Log.d(TAG, "‚úÖ Initial check passed: No overlay detected")
        }
    }

    /**
     * ÿ•ŸäŸÇÿßŸÅ ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©
     */
    fun stopMonitoring() {
        if (!isMonitoring) return

        isMonitoring = false
        handler.removeCallbacksAndMessages(null)
        periodicCheckRunnable = null

        // ÿ•ÿ≤ÿßŸÑÿ© Focus Listener
        focusChangeListener?.let { listener ->
            try {
                activity.window.decorView.viewTreeObserver.removeOnWindowFocusChangeListener(listener)
            } catch (e: Exception) {
                Log.e(TAG, "Error removing focus listener", e)
            }
        }
        focusChangeListener = null

        Log.d(TAG, "‚ùå Overlay monitoring STOPPED")
    }

    /**
     * ŸÖÿ±ÿßŸÇÿ®ÿ© Window Focus
     */
    private fun setupWindowFocusMonitoring() {
        focusChangeListener = ViewTreeObserver.OnWindowFocusChangeListener { hasFocus ->
            if (!isMonitoring) return@OnWindowFocusChangeListener

            val now = System.currentTimeMillis()

            if (!hasFocus) {
                val timeSinceLastFocus = now - lastFocusTime

                Log.w(TAG, "‚ö†Ô∏è FOCUS LOST! Time since last focus: ${timeSinceLastFocus}ms")

                // ‚úÖ ŸÉÿ¥ŸÅ ŸÅŸàÿ±Ÿä ŸÑŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑŸÖÿµÿ∫ÿ±ÿ©
                if (timeSinceLastFocus > FOCUS_LOSS_THRESHOLD) {
                    focusLossCount++

                    Log.e(TAG, "üö® Focus loss count: $focusLossCount/$FOCUS_COUNT_THRESHOLD")

                    if (focusLossCount >= FOCUS_COUNT_THRESHOLD) {
                        // ‚úÖ ÿ™ÿ£ÿÆŸäÿ± ŸÇÿµŸäÿ± ÿ¨ÿØÿßŸã ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑŸÜŸáÿßÿ¶Ÿä
                        handler.postDelayed({
                            if (isMonitoring && !activity.hasWindowFocus()) {
                                Log.e(TAG, "üö®üö®üö® OVERLAY CONFIRMED - TRIGGERING CALLBACK")
                                handleOverlayDetected("WINDOW_FOCUS_LOST")
                            } else {
                                Log.d(TAG, "‚úÖ Focus restored - False alarm")
                                focusLossCount = 0
                            }
                        }, 300) // 300ms ŸÅŸÇÿ∑
                    }
                } else {
                    Log.d(TAG, "üü° Brief focus loss ignored (${timeSinceLastFocus}ms)")
                }
            } else {
                Log.d(TAG, "‚úÖ Focus RESTORED")
                lastFocusTime = now

                // ‚úÖ Reset counter ÿ®ÿπÿØ ÿ™ÿ£ÿÆŸäÿ± ŸÇÿµŸäÿ±
                handler.postDelayed({
                    if (isMonitoring && focusLossCount > 0) {
                        Log.d(TAG, "üîÑ Resetting focus count (was: $focusLossCount)")
                        focusLossCount = 0
                    }
                }, 1000)
            }
        }

        try {
            activity.window.decorView.viewTreeObserver.addOnWindowFocusChangeListener(focusChangeListener)
            Log.d(TAG, "‚úÖ Focus listener registered")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error adding focus listener", e)
        }
    }

    /**
     * ‚úÖ ŸÅÿ≠ÿµ ÿØŸàÿ±Ÿä ŸÉŸÑ ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©
     */
    private fun startPeriodicCheck() {
        periodicCheckRunnable = object : Runnable {
            override fun run() {
                if (!isMonitoring) return

                val hasFocus = activity.hasWindowFocus()

                if (!hasFocus) {
                    Log.w(TAG, "üîç Periodic check: NO FOCUS - Possible overlay!")

                    // ÿ™ÿ£ŸÉŸäÿØ ÿ•ÿ∂ÿßŸÅŸä
                    handler.postDelayed({
                        if (isMonitoring && !activity.hasWindowFocus()) {
                            Log.e(TAG, "üö® PERIODIC CHECK CONFIRMED OVERLAY")
                            handleOverlayDetected("PERIODIC_CHECK_NO_FOCUS")
                        }
                    }, 200)
                } else {
                    Log.d(TAG, "üîç Periodic check: Focus OK")
                }

                // ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ¨ÿØŸàŸÑÿ© ŸÉŸÑ ÿ´ÿßŸÜŸäÿ©
                handler.postDelayed(this, 1000)
            }
        }

        handler.postDelayed(periodicCheckRunnable!!, 1000)
        Log.d(TAG, "‚úÖ Periodic check started (every 1 second)")
    }

    /**
     * ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÉÿ™ÿ¥ÿßŸÅ Overlay
     */
    private fun handleOverlayDetected(reason: String) {
        if (!isMonitoring) return

        Log.e(TAG, """
            ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë  üö® OVERLAY DETECTED: $reason
            ‚ïë  Time: ${System.currentTimeMillis()}
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """.trimIndent())

        try {
            onOverlayDetected()
            Log.d(TAG, "‚úÖ Overlay callback executed successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error calling overlay callback", e)
        }

        // ÿ•ŸäŸÇÿßŸÅ ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©
        handler.postDelayed({
            stopMonitoring()
        }, 100)
    }

    /**
     * ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸäÿØŸàŸä ŸÖŸÜ ExamActivity
     */
    fun onWindowFocusChanged(hasFocus: Boolean) {
        if (!isMonitoring) return

        val now = System.currentTimeMillis()

        if (!hasFocus) {
            val timeSinceLastFocus = now - lastFocusTime

            Log.w(TAG, "üì± Manual check: FOCUS LOST (${timeSinceLastFocus}ms since last)")

            if (timeSinceLastFocus > FOCUS_LOSS_THRESHOLD) {
                focusLossCount++

                Log.w(TAG, "üì± Manual focus loss count: $focusLossCount/$FOCUS_COUNT_THRESHOLD")

                if (focusLossCount >= FOCUS_COUNT_THRESHOLD) {
                    handler.postDelayed({
                        if (isMonitoring && !activity.hasWindowFocus()) {
                            Log.e(TAG, "üö® MANUAL CHECK CONFIRMED OVERLAY")
                            handleOverlayDetected("MANUAL_FOCUS_LOST")
                        }
                    }, 300)
                }
            }
        } else {
            Log.d(TAG, "üì± Manual check: Focus RESTORED")
            lastFocusTime = now

            handler.postDelayed({
                if (isMonitoring) {
                    focusLossCount = 0
                }
            }, 1000)
        }
    }

    /**
     * ŸÅÿ≠ÿµ ŸäÿØŸàŸä ŸÑŸÑŸÄ Overlays ÿßŸÑŸÜÿ¥ÿ∑ÿ©
     */
    fun checkForActiveOverlays(): Boolean {
        return try {
            val hasFocus = activity.hasWindowFocus()

            if (!hasFocus) {
                Log.w(TAG, "üîç Active check: NO FOCUS - Overlay detected!")
                true
            } else {
                Log.d(TAG, "üîç Active check: Focus OK")
                false
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error checking for overlays", e)
            false
        }
    }
}